
configure(allprojects) {
  apply plugin: 'java'
  version = '0.9.0'
  group = 'org.openmuc.jdlms'
}

project.ext {
  distributionProjects = subprojects.findAll {
    it.getPath() == ':axdr-compiler' ||
    it.getPath() == ':jdlms-api'     ||
    it.getPath() == ':jdlms-client'  ||
    it.getPath() == ':jdlms-sample'
  }
  
  docProjects = distributionProjects.findAll {
    it.getPath() == ':jdlms-client'
  }

  apiDocProjects = distributionProjects.findAll {
    it.getPath() == ':jdlms-api'
  }
}

configure(subprojects) {

  apply plugin: 'eclipse'
  apply plugin: 'osgi'
  apply plugin: 'maven'

  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  repositories { mavenCentral()  }
  
  uploadArchives {
    repositories {
      mavenDeployer {
        repository(url: project.properties.repository) {
          authentication(userName: project.properties.artifactoryUser, password: project.properties.artifactoryPass)
        }
        snapshotRepository(url: project.properties.snapshotRepository) {
          authentication(userName: project.properties.artifactoryUser, password: project.properties.artifactoryPass)
        }
      }
    }
  } 

  jar {
    manifest { version = project.version.replace('-','.'); }
  }

  dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
  }

   task copyLibs(type: Copy) {
    dependsOn(configurations.default.getAllArtifacts().getBuildDependencies())

    into rootDir.getPath() + "/build/libs"
    from configurations.default
    from configurations.default.getAllArtifacts().getFiles()
  }

  build.dependsOn(copyLibs)

  eclipse.pathVariables([GRADLE_USER_HOME:file(gradle.gradleUserHomeDir)])
  tasks.eclipse.dependsOn(cleanEclipse)
}

jar.enabled = false

task docClient(type: Javadoc) {
  source docProjects.collect {
    project -> project.sourceSets.main.allJava
  }

  exclude '**/helper/**/*.java'

  destinationDir = new File(buildDir, 'javadoc_client')

  classpath = files(distributionProjects.collect { project ->
    project.sourceSets.main.compileClasspath })
}

task docApi(type: Javadoc) {
  source apiDocProjects.collect {
    project -> project.sourceSets.main.allJava
  }

  exclude '**/helper/**/*.java'

  destinationDir = new File(buildDir, 'javadoc_api')

  classpath = files(distributionProjects.collect { project ->
    project.sourceSets.main.compileClasspath })
}

task javadocs(type: Javadoc) {
}

javadocs.dependsOn {
   tasks.findAll { task -> task.name.startsWith('doc') }
}

task writeSettings << {
  Writer out = new OutputStreamWriter(new FileOutputStream("build/settings.gradle"));
  out.write("include ");
  boolean first = true;
  for (Project myproject: distributionProjects) {
    if (first == true) {
      first = false;
    }
    else {
      out.write ", ";
    }
    out.write "'" + myproject.name + "'"
  }
  out .write "\n\n";

  for (Project myproject: distributionProjects) {
    out.write 'project(":' + myproject.name + '").projectDir = file("' + myproject.getProjectDir().toString().substring((int)(getProjectDir().toString().size() + 1)) + '")\n';
  }

  out.close();
}

task (tar, type: Tar) {
  dependsOn(writeSettings)
  dependsOn(distributionProjects.build)
  dependsOn(javadocs)

  compression = Compression.GZIP

  into(project.archivesBaseName) {
    from('./') {
      include 'src/client/src/**/*'
      include 'src/client/build.gradle'
      include 'src/client/unittests/**/*'
      include 'src/client/asn1/**/*'

      include 'src/api/src/**/*'
      include 'src/api/build.gradle'

      include 'src/sample/src/**/*'
      include 'src/sample/build.gradle'
      include 'src/sample/sampleClient/**/*'
      exclude 'src/sample/sampleClient/**/*.sh'

      include 'src/axdr-compiler/src/**/*'
      include 'src/axdr-compiler/grammatic/**/*'
      include 'src/axdr-compiler/build/lib/**/*'
      include 'src/axdr-compiler/build/docs/**/*'
      include 'src/axdr-compiler/build.gradle'
      include 'src/axdr-compiler/dependencies/**/*'

      include 'doc/**/*'
      include 'licenses/**/*'
      include 'samples/**/*'
      include 'build/libs/**/*'
      include 'build/javadoc_api/**/*'
      include 'build/javadoc_client/**/*'
      include 'build.gradle'

      include 'dependencies/**/*'
    }

    from('./build/') {
      include 'settings.gradle'
    }

    from('./') {
      fileMode = 0755
      include 'src/sample/sampleClient/**/*.sh'
    }
  }
}
